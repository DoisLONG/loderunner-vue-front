{"remainingRequest":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daocloud_j/git/loderunner-vue-front/src/components/ListScroll.vue?vue&type=style&index=0&id=39adb1bb&lang=less&scoped=true&","dependencies":[{"path":"/Users/daocloud_j/git/loderunner-vue-front/src/components/ListScroll.vue","mtime":1591819548000},{"path":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daocloud_j/git/loderunner-vue-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc2Nyb2xsLXdyYXBwZXIgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBvdmVyZmxvdzogaGlkZGVuOwp9Cg=="},{"version":3,"sources":["ListScroll.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJA;AACA;AACA;AACA;AACA","file":"ListScroll.vue","sourceRoot":"src/components","sourcesContent":["<!--\n * 严肃声明：\n * 开源版本请务必保留此注释头信息，若删除我方将保留所有法律责任追究！\n * 本系统已申请软件著作权，受国家版权局知识产权以及国家计算机软件著作权保护！\n * 可正常分享和学习源码，不得用于违法犯罪活动，违者必究！\n * Copyright (c) 2020 陈尼克 all rights reserved.\n * 版权所有，侵权必究！\n *\n-->\n\n<template>\n  <div ref=\"wrapper\" class=\"scroll-wrapper\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport BScroll from 'better-scroll'\nexport default {\n  props: {\n    /**\n     * 1 滚动的时候会派发scroll事件，会截流。\n     * 2 滚动的时候实时派发scroll事件，不会截流。\n     * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n     */\n    probeType: {\n      type: Number,\n      default: 1\n    },\n    // 点击列表是否派发click事件\n    click: {\n      type: Boolean,\n      default: true\n    },\n    // 是否开启横向滚动\n    scrollX: {\n      type: Boolean,\n      default: false\n    },\n    // 是否派发滚动事件\n    listenScroll: {\n      type: Boolean,\n      default: false\n    },\n    // 列表的数据\n    scrollData: {\n      type: Array,\n      default: null\n    },\n    // 是否派发滚动到底部的事件，用于上拉加载\n    pullup: {\n      type: Boolean,\n      default: false\n    },\n    // 是否派发顶部下拉的事件，用于下拉刷新\n    pulldown: {\n      type: Boolean,\n      default: false\n    },\n    // 是否派发列表滚动开始的事件\n    beforeScroll: {\n      type: Boolean,\n      default: false\n    },\n    // 当数据更新后，刷新scroll的延时\n    refreshDelay: {\n      type: Number,\n      default: 20\n    }\n  },\n  mounted() {\n    // 在 DOM 渲染完毕后初始化 better-scroll\n    setTimeout(() => {\n      this.initScroll()\n    }, 20)\n  },\n  methods: {\n    initScroll() {\n      if (!this.$refs.wrapper) {\n        return\n      }\n      // better-scroll 初始化\n      this.scroll = new BScroll(this.$refs.wrapper, {\n        probeType: this.probeType,\n        click: this.click,\n        scrollX: this.scrollX\n      })\n      // 是否派发滚动事件\n      if (this.listenScroll) {\n        const self = this\n        this.scroll.on('scroll', (position) => {\n          self.$emit('scroll', position)\n        })\n      }\n      if (this.pullup) {\n        this.scroll.on('scrollEnd', () => {\n          // 滚动到底部\n          if (this.scroll.y <= (this.scroll.maxScrollY + 50)) {\n            // 派发滚动到底部的事件\n            this.$emit('scrollToEnd')\n          }\n        })\n      }\n      if (this.pulldown) {\n        this.scroll.on('touchend', (pos) => {\n          // 下拉动作\n          if (pos.y > 50) {\n            // 下拉刷新\n            this.$emit('pulldown')\n          }\n        })\n      }\n      if (this.beforeScroll) {\n        this.scroll.on('beforeScrollStart', () => {\n          // 列表滚动前触发\n          this.$emit('beforeScroll')\n        })\n      }\n    },\n    disable() {\n      // 代理 better-scroll 的 disable 方法\n      this.scroll && this.scroll.disable()\n    },\n    enable() {\n        // 代理 better-scroll 的 enable 方法\n        this.scroll && this.scroll.enable()\n    },\n    refresh() {\n        // 代理 better-scroll 的 refresh 方法\n        this.scroll && this.scroll.refresh()\n    },\n    scrollTo() {\n        // 代理 better-scroll 的 scrollTo 方法\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n    },\n    scrollToElement() {\n        // 代理 better-scroll 的 scrollToElement 方法\n        this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)\n    }\n  },\n  watch: {\n    // 监听数据的变化，重新计算高度\n    data() {\n      setTimeout(() => {\n          this.refresh()\n      }, this.refreshDelay)\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n  .scroll-wrapper {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n</style>\n"]}]}